version: 0.2


env:
  secrets-manager:
    SONAR_TOKEN: /myproject/sonarqube/token
    MYSQL_ROOT: mysql/root/password
    MYSQL_DB: mysql/db/password
  
  parameter-store:
    SONAR_PROJECT_KEY: sonar-projectKe
    SONAR_HOST_URL: sonar-host-url
    SONAR_PROJECT_NAME: sonar-project-name

phases:
  install:
    runtime-versions:
      java: corretto11
    commands:
      - echo Entered the install phase...
      - apt-get -y update
      # - export JAVA_HOME=/usr/lib/jvm/java-11-amazon-corretto
      - apt-get install -y maven
      - apt-get install -y npm
      - apt-get install -y openjdk-17-jdk
      - export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
      - curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
      - unzip sonar-scanner.zip -d /opt/
      - export PATH=$PATH:/opt/sonar-scanner-4.8.0.2856-linux/bin
      - sonar-scanner --version
  
  # login to AWS ECR
  pre_build:
    commands:
      - echo Entered the pre_build phase...
      - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 217874473810.dkr.ecr.us-east-1.amazonaws.com
  
  # Build the images 
  build:
    commands:
      - echo Entered the build phase...
      - echo Build started on `date`

      # frontend
      - cd ./UI
      - npm install
      - npm run lint || true
      - npm run build
      - cd ..

      # backend
      - cd ./Server
      - mvn test || true
      - mvn clean verify || true
      - mvn clean install -DskipTests
      - cd ..

      # sonarQube scan
      - sonar-scanner \
          -Dsonar.projectKey=$SONAR_PROJECT_KEY \
          -Dsonar.projectName=$SONAR_PROJECT_NAME \
          -Dsonar.sources=./Server/src,./UI/src \
          -Dsonar.host.url=$SONAR_HOST_URL \
          -Dsonar.login=$SONAR_TOKEN

      # build the images
      - docker-compose -f docker-compose.yml build

      # Tag the images
      - docker tag full-stack-payment-refund-web-api--backend:latest 217874473810.dkr.ecr.us-east-1.amazonaws.com/toprefunder-ecr:backend-001
      - docker tag full-stack-payment-refund-web-api--frontend:latest 217874473810.dkr.ecr.us-east-1.amazonaws.com/toprefunder-ecr:frontend-001
      - docker tag mysql:8.0-oracle 217874473810.dkr.ecr.us-east-1.amazonaws.com/toprefunder-ecr:database-001
  
  # deploy the images to AWS ECR
  post_build:
    commands:
      - echo Entered the post_build phase...
      - echo Build completed on `date`
      - ./check_quality_gate.sh
      - echo Push to ecr
      - docker push 217874473810.dkr.ecr.us-east-1.amazonaws.com/toprefunder-ecr:backend-001
      - docker push 217874473810.dkr.ecr.us-east-1.amazonaws.com/toprefunder-ecr:frontend-001
      - docker push 217874473810.dkr.ecr.us-east-1.amazonaws.com/toprefunder-ecr:database-001

artifacts:
  files:
    - ./Server/target/refundWebAPI-Server-0.0.1-SNAPSHOT.jar
    - ./UI/dist/**
  discard-paths: yes
  
cache:
  paths:
    - '/root/.m2/**/*'
    - './UI/node_modules/**/*'
